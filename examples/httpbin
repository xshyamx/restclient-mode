# -*- mode: restclient -*-
# Emacs restclient examples for httpbin.org
# http://httpbin.org/: HTTP Request & Response Service

@base-uri = http://httpbin.org

# Returns Origin IP.
GET /ip
-> on-response (restclient-set-var "origin" (alist-get 'origin (json-read-object)))

###

# Returns user-agent.
GET /user-agent
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0
###

# Returns header dict.
GET /headers
###

# Returns GET data.
GET /get?some=example&params=for&testing=restclient
###

# Returns POST data.
POST /post
Content-Type: application/json

{
    "jql": "project = HSP",
    "startAt": : {{number}},
    "maxResults": 15,
    "fields": [
        "summary",
        "status",
        "assignee",
	"{{company}}"
    ]
}
###


# Content type is loosely matched, could be application/vnd.whatever+json
GET /response-headers?Content-Type=application/vnd.whatever%2Bjson;%20charset=UTF-8
-> on-response (message "dynamic hook called %s %s"
(random ) (random ))
-> on-response (message "another hook")
###


# Content type is loosely matched, could be application/vnd.whatever+json
GET /response-headers?Content-Type=application/something%2Bjson
###

# Returns PUT data.
PUT /put
Content-Type: application/json

{
    "name": "emacs",
    "awesomness": 9042
}
###

# Returns PATCH data.
PATCH /patch
Content-Type: application/json

[
    {
        "replace": "/awesomness",
        "value": 9043
    }
]
###

# Returns DELETE data
DELETE /delete
If-Match: "*"
###

# HTTP Status codes
# 404
GET /status/404
###
# 200
GET /status/200
###

GET /status/204
###

# Returns given response headers.
GET /response-headers?key=val
###

# cookie data.
GET /cookies
Cookie: name=restclient
###

# HTTPBasic Auth.
@example-auth := (format "Basic %s" (base64-encode-string (format "%s:%s" "user" "password")))
GET /basic-auth/user/password
Authorization: {{example-auth}}
###

# Returns some XML
GET /xml
###

# Test for unicode
PUT /put
Content-Type: application/json

{
    "text": "\u2018a"
}
###

# Localhost bug test
GET http://localhost:3000
###

# Magic mode matching test
GET /response-headers?Content-Type=whatever/braindamage
###

# UTF-8 encoding test
PUT /put
Content-Type: application/json

{
    "text": "привет",
    "text2": "João Sá",
    "text3": "João"
}
###

#
POST /post?one={{number}}
Content-Type: application/x-www-form-urlencoded

pwd=1234&name={{company}}
###

#
@foo = foo\bar
POST /post

{{foo}}
###

#
# Variables
#
@auth-token = abcd1234
@number := <<
(+ 1 2 3 4 5)
#
# still gets resolved
@text := (concat "This is " "{{num" "ber}}")
#
# Multiline variable referencing another variable
#
@my-ip = 123.1.1.1
@common-headers = <<
Authentication: {{auth-token}}
Accept-Charset: utf-8
User-Agent: MyApp/1.0 | Other app {{my-ip}}
Content-type: application/json
#
# ...and another one
@common-body = <<
{ "number": {{number}}, "text": "{{text}}" }
#
# Now, use them both in request
#
POST /post?q=1
{{common-headers}}

{{common-body}}
###
# ...and another example
POST /post?q=2
{{common-headers}}

{
    "other": "body",
    "common": {{common-body}}
}

### POST replacing variables in file
POST /post?q=3
Content-Type: application/json
-> pre-request (make-restclient-request
		:method (restclient-request-method request)
		:url (restclient-request-url request)
		:headers (cons '("X-Additional-Header" . "yes") (restclient-request-headers request))
		:entity (restclient-request-entity request))
<: with-vars.json
###

### POST
POST /post?q=4
-> pre-request (progn (setf (restclient-request-headers request)
	     (append (list '("Content-Type" . "application/json")
			   (cons "Content-Digest"
				 (concat "sha-256=" (secure-hash 'sha256 (restclient-request-entity request )))))
		     (restclient-request-headers request)))
       request)
<: with-vars.json
###

# File upload
PUT /put
Content-type: text/plain

< env.json
###

# Test for issue #121
POST /post?q=json
Content-Type: application/json

{"json": "that looks like header"}
###

@form-payload := (let ((params '((some . 1)
		(params . "with weird/unusual")
		("values[]" . "included!"))))
  (restclient-encode-params params))
# Form submit
POST /post?q=form
Content-Type: application/x-www-form-urlencoded

{{form-payload}}
###

# Resolve variables in file upload
@filename = sample.xml
POST /post
Content-Type: text/xml

<: {{filename}}
###

#
GET /redirect-to?url=http%3A%2F%2Fexample.com%2F
###

@cookie=B=db9s6bpclha4g&b=3&s=eq
POST /post
Cookie: {{cookie}}
###

# ================================================================================================
# dynamic per-request hooks

# multi-line elisp expression called on completion
GET /response-headers?Content-Type=application/vnd.whatever%2Bjson;%20charset=UTF-8
-> on-response (message "dynamic hook called %s %s"
                  (random ) (random ))
###

# set a variable to the value of your ip address using a jq expression
GET /ip
-> jq-set-var my-ip .origin
###

# multiple elsip hooks on call
GET /response-headers?Content-Type=application/vnd.whatever%2Bjson;%20charset=UTF-8
-> on-response (message "hook 1")
-> on-response (message "hook 2")
###

# set basic auth from vars & referencing vars in hooks
@user = jack
@password = secret
@test-me := (format "%s:%s" "{{user}}" "{{password}}")
@auth-token :=  (format "Basic %s" (base64-encode-string "{{test-me}}"))
GET /basic-auth/jack/secret
Authorization: {{auth-token}}
-> on-response (message (format "authenticated with '%s'" (restclient-get-var "auth-token")))
###

# saving header like csrf token for future usage
@token := (random)
POST /response-headers?X-CSRF-Token={{token}}
-> on-response (restclient-set-var-from-header "csrftoken" "X-CSRF-Token")
###

# use save header
GET /headers
X-CSRF-Token: {{csrftoken}}
###

#
GET http://www.redmine.org/issues.xml?limit=10
###

### GET
POST /response-headers?X-Custom-Id=one
###

### GET /json
# override base-uri
@base-uri = http://localhost:8080
GET /json
-> on-response (when-let (obj (json-read-object))
   		(restclient-set-var "json" (json-encode obj)))

###

@base-uri = http://httpbin.org
### POST
POST /post?q=json-var
Content-Type: application/json

{{json}}
###

GET /image/jpeg
###

# do not send body for GET
GET /uuid
-> on-response (restclient-set-var "uuid" (alist-get 'uuid (json-read-object)))
Content-Type: application/json

{ "one": 1}
###

# multipart request
# Note:
# * The boundary must be prefixed with `--` for all parts
# * The last boundary must be prefixed & suffixed with `--`
@color = #ffaabb
@boundary := (org-id-uuid)
POST /post?q=multipart
Content-Type: multipart/form-data; boundary={{boundary}}

--{{boundary}}
Content-Disposition: form-data; name="color"

{{color}}
--{{boundary}}
Content-Disposition: form-data; name="first"; filename="input.json"
Content-Type: application/json; charset=utf-8

<: ./with-vars.json
--{{boundary}}--
###

@quote = "All who wander are not lost" - J. R. R. Tolkien

@lquote := (downcase "{{{quote}}}")
POST /post
Content-Type: application/json

{"quote": "{{{quote}}}"}
###
